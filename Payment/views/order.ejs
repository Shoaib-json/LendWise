<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link
      rel="stylesheet"
      as="style"
      onload="this.rel='stylesheet'"
      href="https://fonts.googleapis.com/css2?display=swap&amp;family=Noto+Sans%3Awght%40400%3B500%3B700%3B900&amp;family=Public+Sans%3Awght%40400%3B500%3B700%3B900"
    />
    <title>Payment | LendWise</title>
    <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />
    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
      .payment-step {
        display: none;
      opacity: 0.5;
      transition: opacity 0.3s ease;
      padding: 1rem 0;
      border-bottom: 1px solid #f1f2f4;
      margin-bottom: 1rem;
      }
      .payment-step.active {
        display: block;
        opacity: 1;
      }
      .payment-step-number {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 24px;
        height: 24px;
        background-color: #c0d6ec;
        color: #121417;
        border-radius: 50%;
        font-weight: bold;
        margin-right: 8px;
      }
      .spinner {
        width: 24px;
        height: 24px;
        border: 3px solid #f1f2f4;
        border-top: 3px solid #c0d6ec;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
      }
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      .payment-success {
        background-color: #e6f2ff;
        border-left: 4px solid #c0d6ec;
        padding: 1rem;
        border-radius: 8px;
        margin-top: 1rem;
      }
    </style>
</head>
<body
  class='group/design-root overflow-x-hidden bg-white'
  style='--select-button-svg: url(&apos;data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 width=%2724px%27 height=%2724px%27 fill=%27rgb(104,117,130)%27 viewBox=%270 0 256 256%27%3e%3cpath d=%27M181.66,170.34a8,8,0,0,1,0,11.32l-48,48a8,8,0,0,1-11.32,0l-48-48a8,8,0,0,1,11.32-11.32L128,212.69l42.34-42.35A8,8,0,0,1,181.66,170.34Zm-96-84.68L128,43.31l42.34,42.35a8,8,0,0,0,11.32-11.32l-48-48a8,8,0,0,0-11.32,0l-48,48A8,8,0,0,0,85.66,85.66Z%27%3e%3c/path%3e%3c/svg%3e&apos;); font-family: "Public Sans", "Noto Sans", sans-serif;'
>
  <div class="flex min-h-screen flex-col">
    <header class="flex items-center justify-between whitespace-nowrap border-b border-solid border-b-[#f0f2f5] px-10 py-3">
          <div class="flex items-center gap-4 text-[#111418]">
            <div class="size-4">
              <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                  fill-rule="evenodd"
                  clip-rule="evenodd"
                  d="M12.0799 24L4 19.2479L9.95537 8.75216L18.04 13.4961L18.0446 4H29.9554L29.96 13.4961L38.0446 8.75216L44 19.2479L35.92 24L44 28.7521L38.0446 39.2479L29.96 34.5039L29.9554 44H18.0446L18.04 34.5039L9.95537 39.2479L4 28.7521L12.0799 24Z"
                  fill="currentColor"
                ></path>
              </svg>
            </div>
            <h2 class="text-[#111418] text-lg font-bold leading-tight tracking-[-0.015em]"><a href="http://localhost:8080/home">LendWise</a></h2>
          </div>
          <div class="flex flex-1 justify-end gap-8">
            <div class="flex items-center gap-9">
              <a class="text-[#111418] text-sm font-medium leading-normal" href="http://localhost:8080/work">How it works</a>
              <a class="text-[#111418] text-sm font-medium leading-normal" href="http://localhost:8080/">Borrow</a>
              <a class="text-[#111418] text-sm font-medium leading-normal" href="http://localhost:8080/investhelp">Invest</a>
              <a class="text-[#111418] text-sm font-medium leading-normal" href="http://localhost:8080/dashboard">Dashboard</a>
            </div>
            <div class="flex gap-2">
              <a href="/"
                class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 px-4 bg-[#0c7ff2] text-white text-sm font-bold leading-normal tracking-[0.015em]"
              >
                <span class="truncate">Apply Now</span>
            </a>
            <% if (!currUser){%>
              <a href="http://localhost:3001/"
                class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 px-4 bg-[#f0f2f5] text-[#111418] text-sm font-bold leading-normal tracking-[0.015em]"
              >
                <span class="truncate">Log In</span>
          </a>
          <%}%>
            </div>
          </div>
        </header>

    <main class="px-40 flex flex-1 justify-center py-5">
      <div class="w-[512px] max-w-[512px] py-5">
        <div class="flex flex-wrap justify-between gap-3 p-4">
          <h1 class="text-[#121417] tracking-light text-[32px] font-bold leading-tight min-w-72">Make a Payment</h1>
        </div>

        <!-- Step 1: Create Order -->
        <div class="payment-step active" id="step1">
          <h3 class="text-[#121417] text-lg font-bold leading-tight tracking-[-0.015em]">
            <span class="payment-step-number">1</span>Payment Details
          </h3>
          
          <form id="createOrderForm" class="mt-4">
            

            <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
              <label class="flex flex-col min-w-40 flex-1">
                <p class="text-[#121417] text-base font-medium leading-normal pb-2">Payment Amount</p>
                <input
                  type="number"
                  id="amount"
                  name="amount"
                  required
                  min="1"
                  step="0.01"
                  class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-[#121417] focus:outline-0 focus:ring-0 border-none bg-[#f1f2f4] focus:border-none h-14 placeholder:text-[#687582] p-4 text-base font-normal leading-normal"
                  placeholder="Enter amount"
                />
              </label>
            </div>

            <div class="flex max-w-[480px] flex-wrap items-end gap-4 px-4 py-3">
              <label class="flex flex-col min-w-40 flex-1">
                <p class="text-[#121417] text-base font-medium leading-normal pb-2">Currency</p>
                <select
                  id="currency"
                  name="currency"
                  class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-xl text-[#121417] focus:outline-0 focus:ring-0 border-none bg-[#f1f2f4] focus:border-none h-14 bg-[image:--select-button-svg] placeholder:text-[#687582] p-4 text-base font-normal leading-normal"
                >
                  <option value="INR">INR</option>
                  <option value="USD">USD</option>
                  <option value="EUR">EUR</option>
                </select>
              </label>
            </div>

            <div class="flex px-4 py-3">
              <button
                type="submit"
                id="createOrderBtn"
                class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-full h-10 px-4 flex-1 bg-[#c0d6ec] text-[#121417] text-sm font-bold leading-normal tracking-[0.015em]"
              >
                <span class="truncate">Create Payment Order</span>
              </button>
            </div>
          </form>
        </div>

        <!-- Step 2: Process Payment -->
        <div class="payment-step" id="step2">
          <h3 class="text-[#121417] text-lg font-bold leading-tight tracking-[-0.015em]">
            <span class="payment-step-number">2</span>Complete Payment
          </h3>
          
          <div id="orderDetails" class="payment-success mt-4">
            <!-- Order details will be populated here -->
          </div>

          <div class="flex px-4 py-3">
            <button
              id="payNowBtn"
              class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-full h-10 px-4 flex-1 bg-[#c0d6ec] text-[#121417] text-sm font-bold leading-normal tracking-[0.015em] mt-4"
            >
              <span class="truncate">Pay Now</span>
            </button>
          </div>
        </div>

        <!-- Loading -->
        <div id="loading" class="hidden text-center p-4">
          <div class="spinner"></div>
          <p id="loadingText" class="text-[#687582] text-sm mt-2">Processing...</p>
        </div>

        <!-- Result -->
        <div id="result" class="hidden"></div>
      </div>
    </main>
  </div>

 <script>
  let currentOrder = null;
  const API_ENDPOINT = '/create-order';
  const VERIFY_ENDPOINT = '/verify-payment';
  const RAZORPAY_KEY = 'rzp_test_64VOeX8TZ2yPkw';

  const form = document.getElementById('createOrderForm');
  const loading = document.getElementById('loading');
  const result = document.getElementById('result');
  const step1 = document.getElementById('step1');
  const step2 = document.getElementById('step2');
  const orderDetails = document.getElementById('orderDetails');
  const payNowBtn = document.getElementById('payNowBtn');
  const loadingText = document.getElementById('loadingText');

  // Step 1: Create Order
  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    showLoading('Creating payment order...');
    hideResult();

    const formData = new FormData(form);
    const orderData = {
      amount: parseFloat(formData.get('amount')),
      currency: formData.get('currency')
    };

    try {
      const response = await fetch(API_ENDPOINT, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
      });

      const data = await response.json();

      if (response.ok) {
        currentOrder = data;
        showOrderDetails(data);
        showStep2();
        showSuccess('Order created successfully. Proceed to payment.');
      } else {
        throw new Error(data.error || 'Failed to create order');
      }
    } catch (error) {
      showError('Error creating order: ' + error.message);
    } finally {
      hideLoading();
    }
  });

  // Step 2: Process Payment
  payNowBtn.addEventListener('click', () => {
    if (!currentOrder) {
      showError('No order found. Please create an order first.');
      return;
    }

    const options = {
      key: RAZORPAY_KEY,
      amount: currentOrder.amount,
      currency: currentOrder.currency,
      name: 'LendWise Loan Payment',
      description: `Loan Payment`,
      order_id: currentOrder.id,
      handler: function(response) {
        verifyPayment(response);
      },
      prefill: {
        name: 'Customer Name',
        email: 'customer@example.com',
        contact: '9999999999'
      },
      theme: {
        color: '#c0d6ec'
      },
      modal: {
        ondismiss: function() {
          showError('Payment cancelled by user');
        }
      }
    };

    try {
      if (typeof Razorpay === 'undefined') {
        throw new Error('Razorpay library not loaded');
      }

      const rzp = new Razorpay(options);
      rzp.on('payment.failed', function (response) {
        showError('Payment failed: ' + response.error.description);
      });

      rzp.open();
    } catch (error) {
      showError('Error opening payment gateway: ' + error.message);
    }
  });

  // Verify Payment
  async function verifyPayment(paymentResponse) {
    showLoading('Verifying payment...');

    const verificationData = {
      razorpay_order_id: paymentResponse.razorpay_order_id,
      razorpay_payment_id: paymentResponse.razorpay_payment_id,
      razorpay_signature: paymentResponse.razorpay_signature
    };

    try {
      const response = await fetch(VERIFY_ENDPOINT, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(verificationData)
      });

      const data = await response.json();

      if (response.ok) {
        showPaymentSuccess(paymentResponse);
      } else {
        throw new Error(data.error || 'Payment verification failed');
      }
    } catch (error) {
      showError('Payment verification failed: ' + error.message);
    } finally {
      hideLoading();
    }
  }

  // UI Helper Functions
  function showLoading(text) {
    loadingText.textContent = text;
    loading.classList.remove('hidden');
  }

  function hideLoading() {
    loading.classList.add('hidden');
  }

  function showResult(className, message) {
    result.className = `result ${className}`;
    result.innerHTML = message;
    result.classList.remove('hidden');
  }

  function hideResult() {
    result.classList.add('hidden');
  }

  function showSuccess(message) {
    result.innerHTML = `
      <div class="payment-success">
        <p class="text-[#121417] font-medium">✅ ${message}</p>
      </div>
    `;
    result.classList.remove('hidden');
  }

  function showError(message) {
    result.innerHTML = `
      <div class="bg-[#ffebee] border-l-4 border-[#f44336] p-4 rounded-r">
        <p class="text-[#f44336] font-medium">❌ ${message}</p>
      </div>
    `;
    result.classList.remove('hidden');
  }

  function showOrderDetails(order) {
    orderDetails.innerHTML = `
      <h4 class="text-[#121417] font-bold mb-2">Order Details</h4>
      <div class="grid grid-cols-[30%_1fr] gap-y-2">
        <p class="text-[#687582] text-sm">Order ID:</p>
        <p class="text-[#121417] text-sm">${order.id}</p>
        <p class="text-[#687582] text-sm">Amount:</p>
        <p class="text-[#121417] text-sm">${order.currency} ${(order.amount / 100).toFixed(2)}</p>
        <p class="text-[#687582] text-sm">Status:</p>
        <p class="text-[#121417] text-sm">${order.status}</p>
      </div>
    `;
  }

  function showStep2() {
    step1.classList.remove('active');
    step2.classList.add('active');
  }

  function showPaymentSuccess(paymentResponse) {
    result.innerHTML = `
      <div class="payment-success">
        <h4 class="text-[#121417] font-bold mb-2">🎉 Payment Successful!</h4>
        <div class="grid grid-cols-[30%_1fr] gap-y-2">
          <p class="text-[#687582] text-sm">Payment ID:</p>
          <p class="text-[#121417] text-sm">${paymentResponse.razorpay_payment_id}</p>
          <p class="text-[#687582] text-sm">Order ID:</p>
          <p class="text-[#121417] text-sm">${paymentResponse.razorpay_order_id}</p>
          <p class="text-[#687582] text-sm">Amount:</p>
          <p class="text-[#121417] text-sm">${currentOrder.currency} ${(currentOrder.amount / 100).toFixed(2)}</p>
          <p class="text-[#687582] text-sm">Status:</p>
          <p class="text-[#121417] text-sm">Paid & Verified</p>
        </div>
        <p class="text-[#687582] text-sm mt-3">
          Your payment has been successfully processed and verified.
        </p>
      </div>
    `;
    result.classList.remove('hidden');

    payNowBtn.textContent = 'Payment Completed ✓';
    payNowBtn.classList.add('bg-[#4caf50]', 'text-white');
    payNowBtn.disabled = true;
  }
</script>

</body>
</html>